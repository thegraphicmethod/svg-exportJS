{"version":3,"file":"svg-export.cjs","sources":["../src/svg-export.js"],"sourcesContent":["/*\n * svg-export.js - Javascript SVG parser and renderer on Canvas\n * version 1.2.0\n * MIT Licensed\n * Sharon Choong (https://sharonchoong.github.io/about.html)\n * https://sharonchoong.github.io/svg-export\n *\n */\n\nclass SvgExport {\n  constructor(dependencies = {}) {\n    this.version = \"1.2.0\";\n    this._options = {};\n\n    // Store dependencies\n    this._canvg = dependencies.canvg;\n    this._pdfkit = dependencies.pdfkit;\n    this._svgToPdf = dependencies.svgToPdf;\n    this._blobStream = dependencies.blobStream;\n    this._presets = dependencies.presets;\n    this._textToPath = dependencies.textToPath;\n\n    // Check available dependencies\n    this._hasCanvg = typeof this._canvg !== \"undefined\";\n    this._hasPDF =\n      typeof this._pdfkit !== \"undefined\" &&\n      typeof this._svgToPdf !== \"undefined\" &&\n      typeof this._blobStream !== \"undefined\";\n    this._hasTextToPath = typeof this._textToPath !== \"undefined\";\n  }\n\n  // Optional method to set dependencies after construction\n  setDependencies(dependencies) {\n    this._canvg = dependencies.canvg;\n    this._pdfkit = dependencies.pdfkit;\n    this._svgToPdf = dependencies.svgToPdf;\n    this._blobStream = dependencies.blobStream;\n    this._textToPath = dependencies.textToPath;\n\n    this._hasCanvg = typeof this._canvg !== \"undefined\";\n    this._hasTextToPath = typeof this._textToPath !== \"undefined\";\n\n    this._hasPDF =\n      typeof this._pdfkit !== \"undefined\" &&\n      typeof this._svgToPdf !== \"undefined\" &&\n      typeof this._blobStream !== \"undefined\";\n  }\n\n  // Private helper methods\n  _warnError(str) {\n    if (typeof console !== undefined && typeof console.warn === \"function\") {\n      console.warn(str);\n    }\n  }\n\n  _getSvgElement(svg) {\n    let div = document.createElement(\"div\");\n    div.className = \"tempdiv-svg-exportJS\";\n\n    if (typeof svg === \"string\") {\n      div.insertAdjacentHTML(\"beforeend\", svg.trim());\n      svg = div.firstChild;\n    }\n\n    if (!svg.nodeType || svg.nodeType !== 1) {\n      this._warnError(\"Error svg-export: The input svg was not recognized\");\n      return null;\n    }\n\n    let svgClone = svg.cloneNode(true);\n    svgClone.style.display = null;\n    div.appendChild(svgClone);\n    div.style.visibility = \"hidden\";\n    div.style.display = \"table\";\n    div.style.position = \"absolute\";\n    document.body.appendChild(div);\n    return svgClone;\n  }\n\n  _setPdfOptions(options) {\n    if (options && options.pdfOptions) {\n      Object.keys(this._options.pdfOptions).forEach((opt) => {\n        if (\n          options.pdfOptions.hasOwnProperty(opt) &&\n          typeof options.pdfOptions[opt] ===\n            typeof this._options.pdfOptions[opt]\n        ) {\n          if (options.pdfOptions[opt] === \"\") {\n            return;\n          }\n          this._options.pdfOptions[opt] = options.pdfOptions[opt];\n        }\n      });\n\n      if (!this._options.pdfOptions.pageLayout.margin) {\n        this._options.pdfOptions.pageLayout.margin = 50;\n      }\n      if (!this._options.pdfOptions.pageLayout.margins) {\n        this._options.pdfOptions.pageLayout.margins = {};\n      }\n    }\n    this._options.pdfOptions.pageLayout.margins.top =\n      this._options.pdfOptions.pageLayout.margins.top ||\n      this._options.pdfOptions.pageLayout.margin;\n    this._options.pdfOptions.pageLayout.margins.bottom =\n      this._options.pdfOptions.pageLayout.margins.bottom ||\n      this._options.pdfOptions.pageLayout.margin;\n    this._options.pdfOptions.pageLayout.margins.left =\n      this._options.pdfOptions.pageLayout.margins.left ||\n      this._options.pdfOptions.pageLayout.margin;\n    this._options.pdfOptions.pageLayout.margins.right =\n      this._options.pdfOptions.pageLayout.margins.top ||\n      this._options.pdfOptions.pageLayout.margin;\n    delete this._options.pdfOptions.pageLayout.margin;\n    if (!(options && this._options.pdfOptions.pageLayout.size)) {\n      this._options.pdfOptions.pageLayout.size = [\n        Math.max(300, this._options.width) +\n          this._options.pdfOptions.pageLayout.margins.left +\n          this._options.pdfOptions.pageLayout.margins.right,\n        Math.max(300, this._options.height) +\n          this._options.pdfOptions.pageLayout.margins.top +\n          this._options.pdfOptions.pageLayout.margins.bottom +\n          (this._options.pdfOptions.addTitleToPage\n            ? this._options.pdfOptions.pdfTitleFontSize * 2 + 10\n            : 0) +\n          (this._options.pdfOptions.chartCaption !== \"\"\n            ? this._options.pdfOptions.pdfCaptionFontSize * 4 + 10\n            : 0),\n      ];\n    }\n  }\n\n  _setOptions(svgElement, options) {\n    // Initialize options for this instance\n    this._options = {\n      originalWidth: 100,\n      originalHeight: 100,\n      originalMinXViewBox: 0,\n      originalMinYViewBox: 0,\n      originalWidthViewbox: 100,\n      originalHeightViewbox: 100,\n      width: 100,\n      height: 100,\n      scale: 1,\n      useCSS: true,\n      transparentBackgroundReplace: \"white\",\n      allowCrossOriginImages: false,\n      elementsToExclude: [],\n      convertTextToPath: false,\n      svgTextToPathSettings: {\n        fonts: [],\n      },\n      pdfOptions: {\n        customFonts: [],\n        pageLayout: { margin: 50, margins: {} },\n        addTitleToPage: true,\n        chartCaption: \"\",\n        pdfTextFontFamily: \"Helvetica\",\n        pdfTitleFontSize: 20,\n        pdfCaptionFontSize: 14,\n      },\n      onDone: null,\n    };\n\n    //original size\n    if (options && options.originalHeight && options.originalWidth) {\n      this._options.originalHeight = options.originalHeight;\n      this._options.originalWidth = options.originalWidth;\n    } else {\n      this._options.originalHeight =\n        svgElement.style.getPropertyValue(\"height\").indexOf(\"%\") !== -1 ||\n        (svgElement.getAttribute(\"height\") &&\n          svgElement.getAttribute(\"height\").indexOf(\"%\") !== -1)\n          ? svgElement.getBBox().height\n          : svgElement.getBoundingClientRect().height;\n      this._options.originalWidth =\n        svgElement.style.getPropertyValue(\"width\").indexOf(\"%\") !== -1 ||\n        (svgElement.getAttribute(\"width\") &&\n          svgElement.getAttribute(\"width\").indexOf(\"%\") !== -1)\n          ? svgElement.getBBox().width\n          : svgElement.getBoundingClientRect().width;\n    }\n\n    const viewBox = svgElement.getAttribute(\"viewBox\");\n    if (viewBox) {\n      const values = viewBox.split(/[\\s,]+/); // Split on one or more spaces or commas\n      this._options.originalMinXViewBox = values[0] ?? 0;\n      this._options.originalMinYViewBox = values[1] ?? 0;\n      this._options.originalWidthViewbox = values[2] ?? 100;\n      this._options.originalHeightViewbox = values[3] ?? 100;\n    } else {\n      this._options.originalMinXViewBox = 0;\n      this._options.originalMinYViewBox = 0;\n      this._options.originalWidthViewbox = NaN;\n      this._options.originalHeightViewbox = NaN;\n    }\n\n    //custom options\n    if (options && options.scale && typeof options.scale === \"number\") {\n      this._options.scale = options.scale;\n    }\n    if (!options || !options.height) {\n      this._options.height = this._options.originalHeight * this._options.scale;\n    } else if (typeof options.height === \"number\") {\n      this._options.height = options.height * this._options.scale;\n    }\n    if (!options || !options.width) {\n      this._options.width = this._options.originalWidth * this._options.scale;\n    } else if (typeof options.width === \"number\") {\n      this._options.width = options.width * this._options.scale;\n    }\n    if (options && options.useCSS === false) {\n      this._options.useCSS = false;\n    }\n    if (options && options.transparentBackgroundReplace) {\n      this._options.transparentBackgroundReplace =\n        options.transparentBackgroundReplace;\n    }\n    if (options && options.allowCrossOriginImages) {\n      this._options.allowCrossOriginImages = options.allowCrossOriginImages;\n    }\n    if (\n      options &&\n      options.excludeByCSSSelector &&\n      typeof options.excludeByCSSSelector === \"string\"\n    ) {\n      this._options.elementsToExclude = svgElement.querySelectorAll(\n        options.excludeByCSSSelector\n      );\n    }\n    if (options && options.onDone && typeof options.onDone === \"function\") {\n      this._options.onDone = options.onDone;\n    }\n    if (options && options.svgTextToPathSettings) {\n      this._options.svgTextToPathSettings = options.svgTextToPathSettings;\n    }\n    if (options && options.convertTextToPath) {\n      this._options.convertTextToPath = options.convertTextToPath;\n    }\n\n    this._setPdfOptions(options);\n  }\n\n  useCSSfromComputedStyles(element, elementClone) {\n    if (typeof getComputedStyle !== \"function\") {\n      this._warnError(\n        \"Warning svg-export: this browser is not able to get computed styles\"\n      );\n      return;\n    }\n\n    for (let i = 0; i < this._options.elementsToExclude.length; i++) {\n      if (this._options.elementsToExclude[i] === elementClone) {\n        // prevent continuation of this function if user wants to exclude the child element\n        return;\n      }\n    }\n\n    let compStyles = window.getComputedStyle(element);\n    if (compStyles.length > 0) {\n      for (const compStyle of compStyles) {\n        if (\n          [\"width\", \"height\", \"inline-size\", \"block-size\"].indexOf(\n            compStyle\n          ) === -1\n        ) {\n          elementClone.style.setProperty(\n            compStyle,\n            compStyles.getPropertyValue(compStyle)\n          );\n        }\n      }\n    }\n\n    // Use arrow function to preserve 'this' context\n    element.childNodes.forEach((child, index) => {\n      if (child.nodeType === 1 /*Node.ELEMENT_NODE*/) {\n        this.useCSSfromComputedStyles(\n          child,\n          elementClone.childNodes[parseInt(index, 10)]\n        );\n      }\n    });\n  }\n\n  setupSvg(svgElement, originalSvg, asString) {\n    if (typeof asString === \"undefined\") {\n      asString = true;\n    }\n    if (this._options.useCSS && typeof originalSvg === \"object\") {\n      this.useCSSfromComputedStyles(originalSvg, svgElement);\n      svgElement.style.display = null;\n    }\n\n    this._options.elementsToExclude.forEach((element) => {\n      element.remove();\n    });\n\n    svgElement.style.width = null;\n    svgElement.style.height = null;\n    svgElement.setAttribute(\"width\", this._options.width);\n    svgElement.setAttribute(\"height\", this._options.height);\n    svgElement.setAttribute(\"preserveAspectRatio\", \"none\");\n    svgElement.setAttribute(\n      \"viewBox\",\n      this._options.originalMinXViewBox +\n        \" \" +\n        this._options.originalMinYViewBox +\n        \" \" +\n        (isNaN(this._options.originalWidthViewbox)\n          ? this._options.originalWidth\n          : this._options.originalWidthViewbox) +\n        \" \" +\n        (isNaN(this._options.originalHeightViewbox)\n          ? this._options.originalHeight\n          : this._options.originalHeightViewbox)\n    );\n\n    let elements = document.getElementsByClassName(\"tempdiv-svg-exportJS\");\n    while (elements.length > 0) {\n      elements[0].parentNode.removeChild(elements[0]);\n    }\n\n    //get svg string\n    if (asString) {\n      let serializer = new XMLSerializer();\n      //setting currentColor to black matters if computed styles are not used\n      let svgString = serializer\n        .serializeToString(svgElement)\n        .replace(/currentColor/g, \"black\");\n\n      //add namespaces\n      if (\n        !svgString.match(/^<svg[^>]+xmlns=\"http\\:\\/\\/www\\.w3\\.org\\/2000\\/svg\"/)\n      ) {\n        svgString = svgString.replace(\n          /^<svg/,\n          '<svg xmlns=\"http://www.w3.org/2000/svg\"'\n        );\n      }\n      if (!svgString.match(/^<svg[^>]+\"http\\:\\/\\/www\\.w3\\.org\\/1999\\/xlink\"/)) {\n        svgString = svgString.replace(\n          /^<svg/,\n          '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\"'\n        );\n      }\n\n      return svgString;\n    }\n    return svgElement;\n  }\n\n  convertImageURLtoDataURI(image) {\n    // Preserve this context for use inside Promise and event handlers\n    const self = this;\n    return new Promise((resolve, reject) => {\n      const newImage = new Image();\n\n      newImage.onload = () => {\n        const canvas = document.createElement(\"canvas\");\n        // Use newImage directly since we know that's what we want\n        canvas.width =\n          newImage.naturalWidth ||\n          newImage.getAttribute(\"width\") ||\n          newImage.style.getPropertyValue(\"width\") ||\n          300;\n        canvas.height =\n          newImage.naturalHeight ||\n          newImage.getAttribute(\"height\") ||\n          newImage.style.getPropertyValue(\"height\") ||\n          300;\n\n        canvas.getContext(\"2d\").drawImage(newImage, 0, 0);\n\n        const dataURI = canvas.toDataURL(\"image/png\");\n        image.setAttribute(\"href\", dataURI);\n        resolve();\n      };\n\n      if (self._options.allowCrossOriginImages) {\n        newImage.crossOrigin = \"anonymous\";\n      }\n      newImage.src =\n        image.getAttribute(\"href\") ||\n        image.getAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\");\n    });\n  }\n\n  getCustomFonts(fontUrls) {\n    let promises = [];\n    fontUrls.forEach((fontUrl) => {\n      let promise = new Promise((resolve, reject) => {\n        let req = new XMLHttpRequest();\n        req.onreadystatechange = () => {\n          if (req.readyState === 4 && req.status === 200) {\n            resolve(req.response);\n          }\n        };\n        req.open(\"GET\", fontUrl, true);\n        req.responseType = \"arraybuffer\";\n        req.send(null);\n      });\n      promises.push(promise);\n    });\n    return promises;\n  }\n\n  triggerDownload(uri, name, canvas) {\n    name = name.replace(/[/\\\\?%*:|\"<>]/g, \"_\");\n    if (navigator.msSaveBlob) {\n      let binary = decodeURIComponent(uri.split(\",\")[1]),\n        array = [];\n      let mimeString = uri.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n      for (let i = 0; i < binary.length; i++) {\n        array.push(binary.charCodeAt(i));\n      }\n      let blob = null;\n      if (canvas != null) {\n        blob = canvas.msToBlob();\n      } else {\n        blob = new Blob([new Uint8Array(array)], { type: mimeString });\n      }\n      navigator.msSaveBlob(blob, name);\n    } else {\n      let link = document.createElement(\"a\");\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n    if (this._options.onDone) {\n      this._options.onDone();\n    }\n  }\n\n  downloadSvg(svg, svgName, options) {\n    if (svgName == null) {\n      svgName = \"chart\";\n    }\n\n    const processSvgAndDownload = () => {\n      const svgElement = this._getSvgElement(svg);\n      if (!svgElement) {\n        return;\n      }\n      this._setOptions(svgElement, options);\n      // -custom images\n      const images = svgElement.getElementsByTagName(\"image\");\n      const image_promises = [];\n\n      if (images) {\n        for (let image of images) {\n          if (\n            (image.getAttribute(\"href\") &&\n              image.getAttribute(\"href\").indexOf(\"data:\") === -1) ||\n            (image.getAttribute(\"xlink:href\") &&\n              image.getAttribute(\"xlink:href\").indexOf(\"data:\") === -1)\n          ) {\n            image_promises.push(this.convertImageURLtoDataURI(image));\n          }\n        }\n      }\n\n      Promise.all(image_promises).then(() => {\n        //get svg string\n        let svgString = this.setupSvg(svgElement, svg);\n\n        //add xml declaration\n        svgString = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n' + svgString;\n\n        //convert svg string to URI data scheme.\n        let url =\n          \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(svgString);\n\n        this.triggerDownload(url, svgName + \".svg\");\n      });\n    };\n    \n    if (options.convertTextToPath) {\n      const mysesion = new this._textToPath(svg, options.svgTextToPathSettings);\n      mysesion.replaceAll().then(() => {\n        processSvgAndDownload();\n        mysesion.destroy();\n      });\n    } else {\n      processSvgAndDownload();\n    }\n\n    \n  }\n\n  async downloadRaster(svg, svgName, options, imageType) {\n    if (!this._hasCanvg) {\n      this._warnError(\n        \"Error svg-export: PNG/JPEG export requires Canvg. Install it via npm or include it via script tag.\"\n      );\n      return;\n    }\n\n    imageType = imageType.toLowerCase().replace(\"jpg\", \"jpeg\");\n    if (imageType !== \"png\" && imageType !== \"jpeg\") {\n      imageType = \"png\";\n    }\n    const svgElement = this._getSvgElement(svg);\n    if (!svgElement) {\n      return;\n    }\n    if (svgName == null) {\n      svgName = \"chart\";\n    }\n    //get canvas and svg element.\n\n    if (!options) {\n      options = {};\n    }\n\n    this._setOptions(svgElement, options);\n    let svgString = this.setupSvg(svgElement, svg);\n\n    if (imageType === \"jpeg\") {\n      //change transparent background to white\n      svgString = svgString.replace(\n        \">\",\n        '><rect x=\"0\" y=\"0\" width=\"' +\n          this._options.width +\n          '\" height=\"' +\n          this._options.height +\n          '\" fill=\"' +\n          this._options.transparentBackgroundReplace +\n          '\"/>'\n      );\n    }\n    svgString = this.removeBreakingStyles(svgString);\n    let canvas = new OffscreenCanvas(this._options.width, this._options.height);\n    const preset = this._presets.offscreen();\n    preset.anonymousCrossOrigin = this._options.allowCrossOriginImages;\n    let ctx = canvas.getContext(\"2d\");\n\n    let v = this._canvg.fromString(ctx, svgString, preset);\n    v.start();\n    // await new Promise((resolve) => setTimeout(resolve, 500));\n    v.ready().then(() => {\n      const type = imageType === \"jpeg\" ? \"image/jpeg\" : \"image/png\";\n      canvas\n        .convertToBlob({\n          type,\n        })\n        .then((blob) => {\n          const imgUrl = URL.createObjectURL(blob);\n          //let img = new Image();\n          //img.src = imgUrl;\n          //document.getElementById(\"teleports\").appendChild(img);\n          this.triggerDownload(imgUrl, svgName + \".\" + imageType, canvas);\n        });\n    });\n  }\n\n  removeBreakingStyles(domString) {\n    // I found that \"mask: none; mask-type: luminance;\" breaks canvavg conversion\n    // so I need to remove it\n    return domString.replace(/mask: none; mask-type: luminance;/g, \"\");\n  }\n\n  downloadPng(svg, svgName, options) {\n    this.downloadRaster(svg, svgName, options, \"png\");\n  }\n  downloadJpeg(svg, svgName, options) {\n    this.downloadRaster(svg, svgName, options, \"jpeg\");\n  }\n\n  fillPDFDoc(doc, svgName, svg) {\n    // -title\n    if (this._options.pdfOptions.addTitleToPage) {\n      doc\n        .font(this._options.pdfOptions.pdfTextFontFamily)\n        .fontSize(this._options.pdfOptions.pdfTitleFontSize)\n        .text(svgName, {\n          width:\n            this._options.pdfOptions.pageLayout.size[0] -\n            this._options.pdfOptions.pageLayout.margins.left -\n            this._options.pdfOptions.pageLayout.margins.right,\n        });\n    }\n    // -svg\n    this._svgToPdf(\n      doc,\n      svg,\n      this._options.pdfOptions.pageLayout.margins.left,\n      doc.y + 10,\n      {\n        width: this._options.width,\n        height: this._options.height,\n        preserveAspectRatio: \"none\",\n        useCSS: this._options.useCSS,\n      }\n    );\n\n    // -caption\n    if (this._options.pdfOptions.chartCaption !== \"\") {\n      doc\n        .font(this._options.pdfOptions.pdfTextFontFamily)\n        .fontSize(this._options.pdfOptions.pdfCaptionFontSize)\n        .text(\n          this._options.pdfOptions.chartCaption,\n          this._options.pdfOptions.pageLayout.margins.left,\n          this._options.pdfOptions.pageLayout.size[1] -\n            this._options.pdfOptions.pageLayout.margins.bottom -\n            this._options.pdfOptions.pdfCaptionFontSize * 4,\n          {\n            width:\n              this._options.pdfOptions.pageLayout.size[0] -\n              this._options.pdfOptions.pageLayout.margins.left -\n              this._options.pdfOptions.pageLayout.margins.right,\n          }\n        );\n    }\n  }\n  downloadPdf(svg, svgName, options) {\n    //check dependency and values\n    if (!this._hasPDF) {\n      this._warnError(\n        \"Error svg-export: PDF export requires PDFKit, blob-stream and SVG-to-PDFKit.\"\n      );\n      return;\n    }\n    //get svg element\n    const svgElement = this._getSvgElement(svg);\n    if (!svgElement) {\n      return;\n    }\n    if (svgName == null) {\n      svgName = \"chart\";\n    }\n    this._setOptions(svgElement, options);\n    const svgCloned = this.setupSvg(svgElement, svg, false);\n\n    //create PDF doc\n    const doc = new this._pdfkit(this._options.pdfOptions.pageLayout);\n    const stream = doc.pipe(this._blobStream());\n\n    // -custom images\n    let images = svgElement.getElementsByTagName(\"image\");\n    let image_promises = [];\n    if (images) {\n      for (let image of images) {\n        if (\n          (image.getAttribute(\"href\") &&\n            image.getAttribute(\"href\").indexOf(\"data:\") === -1) ||\n          (image.getAttribute(\"xlink:href\") &&\n            image.getAttribute(\"xlink:href\").indexOf(\"data:\") === -1)\n        ) {\n          image_promises.push(this.convertImageURLtoDataURI(image));\n        }\n      }\n    }\n\n    // -custom fonts\n    Promise.all(image_promises).then(() => {\n      if (this._options.pdfOptions.customFonts.length > 0) {\n        let font_promises = this.getCustomFonts(\n          this._options.pdfOptions.customFonts.map((d) => d.url)\n        );\n        Promise.all(font_promises).then((fonts) => {\n          fonts.forEach((font, index) => {\n            let thisPdfOptions =\n              this._options.pdfOptions.customFonts[parseInt(index, 10)];\n            let fontStyledElements = svgCloned.querySelectorAll(\n              '[style*=\"' + thisPdfOptions.fontName + '\"]'\n            );\n            fontStyledElements.forEach((element) => {\n              element.style.fontFamily = thisPdfOptions.fontName;\n            });\n            if (\n              (thisPdfOptions.url.indexOf(\".ttc\") !== -1 ||\n                thisPdfOptions.url.indexOf(\".dfont\") !== -1) &&\n              thisPdfOptions.styleName\n            ) {\n              doc.registerFont(\n                thisPdfOptions.fontName,\n                font,\n                thisPdfOptions.styleName\n              );\n            } else {\n              doc.registerFont(thisPdfOptions.fontName, font);\n            }\n          });\n          this.fillPDFDoc(doc, svgName, svgCloned);\n          doc.end();\n        });\n      } else {\n        this.fillPDFDoc(doc, svgName, svgCloned);\n        doc.end();\n      }\n    });\n\n    stream.on(\"finish\", () => {\n      let url = stream.toBlobURL(\"application/pdf\");\n      this.triggerDownload(url, svgName + \".pdf\");\n    });\n  }\n}\n\n// Export for different module systems\nif (typeof exports === \"object\" && typeof module !== \"undefined\") {\n  module.exports = SvgExport;\n} else if (typeof define === \"function\" && define.amd) {\n  define(function () {\n    return SvgExport;\n  });\n} else {\n  (typeof globalThis !== \"undefined\" ? globalThis : self).SvgExport = SvgExport;\n}\nexport default SvgExport;\n"],"names":["SvgExport","dependencies","this","version","_options","_canvg","canvg","_pdfkit","pdfkit","_svgToPdf","svgToPdf","_blobStream","blobStream","_presets","presets","_textToPath","textToPath","_hasCanvg","_hasPDF","_hasTextToPath","_proto","prototype","setDependencies","_warnError","str","undefined","console","warn","_getSvgElement","svg","div","document","createElement","className","insertAdjacentHTML","trim","firstChild","nodeType","svgClone","cloneNode","style","display","appendChild","visibility","position","body","_setPdfOptions","options","_this","pdfOptions","Object","keys","forEach","opt","hasOwnProperty","pageLayout","margin","margins","top","bottom","left","right","size","Math","max","width","height","addTitleToPage","pdfTitleFontSize","chartCaption","pdfCaptionFontSize","_setOptions","svgElement","originalWidth","originalHeight","originalMinXViewBox","originalMinYViewBox","originalWidthViewbox","originalHeightViewbox","scale","useCSS","transparentBackgroundReplace","allowCrossOriginImages","elementsToExclude","convertTextToPath","svgTextToPathSettings","fonts","customFonts","pdfTextFontFamily","onDone","getPropertyValue","indexOf","getAttribute","getBBox","getBoundingClientRect","viewBox","_values$","_values$2","_values$3","_values$4","values","split","NaN","excludeByCSSSelector","querySelectorAll","useCSSfromComputedStyles","element","elementClone","_this2","getComputedStyle","i","length","compStyles","window","_iterator","_step","_createForOfIteratorHelperLoose","done","compStyle","value","setProperty","childNodes","child","index","parseInt","setupSvg","originalSvg","asString","remove","setAttribute","isNaN","elements","getElementsByClassName","parentNode","removeChild","svgString","XMLSerializer","serializeToString","replace","match","convertImageURLtoDataURI","image","self","Promise","resolve","reject","newImage","Image","onload","canvas","naturalWidth","naturalHeight","getContext","drawImage","dataURI","toDataURL","crossOrigin","src","getAttributeNS","getCustomFonts","fontUrls","promises","fontUrl","promise","req","XMLHttpRequest","onreadystatechange","readyState","status","response","open","responseType","send","push","triggerDownload","uri","name","navigator","msSaveBlob","binary","decodeURIComponent","array","mimeString","charCodeAt","blob","msToBlob","Blob","Uint8Array","type","link","download","href","click","downloadSvg","svgName","_this3","processSvgAndDownload","images","getElementsByTagName","image_promises","_iterator2","_step2","all","then","url","encodeURIComponent","mysesion","replaceAll","destroy","downloadRaster","imageType","_this4","toLowerCase","removeBreakingStyles","OffscreenCanvas","preset","offscreen","anonymousCrossOrigin","ctx","v","fromString","start","ready","convertToBlob","imgUrl","URL","createObjectURL","e","domString","downloadPng","downloadJpeg","fillPDFDoc","doc","font","fontSize","text","y","preserveAspectRatio","downloadPdf","_this5","svgCloned","stream","pipe","_iterator3","_step3","font_promises","map","d","thisPdfOptions","fontName","fontFamily","styleName","registerFont","end","on","toBlobURL","exports","module","define","amd","globalThis"],"mappings":"oyBASM,IAAAA,eAAS,WACb,SAAAA,EAAYC,QAAAA,IAAAA,IAAAA,EAAe,CAAE,GAC3BC,KAAKC,QAAU,QACfD,KAAKE,SAAW,CAAE,EAGlBF,KAAKG,OAASJ,EAAaK,MAC3BJ,KAAKK,QAAUN,EAAaO,OAC5BN,KAAKO,UAAYR,EAAaS,SAC9BR,KAAKS,YAAcV,EAAaW,WAChCV,KAAKW,SAAWZ,EAAaa,QAC7BZ,KAAKa,YAAcd,EAAae,WAGhCd,KAAKe,eAAmC,IAAZf,KAACG,OAC7BH,KAAKgB,aACqB,IAAjBhB,KAAKK,cACc,IAAfL,KAACO,gBACgB,IAArBP,KAAKS,YACdT,KAAKiB,oBAA6C,IAAjBjB,KAACa,WACpC,CAAC,IAAAK,EAAApB,EAAAqB,UA+pBArB,OA/pBAoB,EAGDE,gBAAA,SAAgBrB,GACdC,KAAKG,OAASJ,EAAaK,MAC3BJ,KAAKK,QAAUN,EAAaO,OAC5BN,KAAKO,UAAYR,EAAaS,SAC9BR,KAAKS,YAAcV,EAAaW,WAChCV,KAAKa,YAAcd,EAAae,WAEhCd,KAAKe,eAAmC,IAAhBf,KAAKG,OAC7BH,KAAKiB,oBAA6C,IAAjBjB,KAACa,YAElCb,KAAKgB,aACqB,IAAjBhB,KAAKK,cACc,IAAfL,KAACO,gBACgB,IAArBP,KAAKS,WAChB,EAACS,EAGDG,WAAA,SAAWC,QACcC,WAAZC,SAAiD,mBAAjBA,QAAQC,MACjDD,QAAQC,KAAKH,EAEjB,EAACJ,EAEDQ,eAAA,SAAeC,GACb,IAAIC,EAAMC,SAASC,cAAc,OAQjC,GAPAF,EAAIG,UAAY,uBAEG,iBAARJ,IACTC,EAAII,mBAAmB,YAAaL,EAAIM,QACxCN,EAAMC,EAAIM,aAGPP,EAAIQ,UAA6B,IAAjBR,EAAIQ,SAEvB,OADAnC,KAAKqB,WAAW,sDACT,KAGT,IAAIe,EAAWT,EAAIU,WAAU,GAO7B,OANAD,EAASE,MAAMC,QAAU,KACzBX,EAAIY,YAAYJ,GAChBR,EAAIU,MAAMG,WAAa,SACvBb,EAAIU,MAAMC,QAAU,QACpBX,EAAIU,MAAMI,SAAW,WACrBb,SAASc,KAAKH,YAAYZ,GACnBQ,CACT,EAAClB,EAED0B,eAAA,SAAeC,GAAS,IAAAC,EAAA9C,KAClB6C,GAAWA,EAAQE,aACrBC,OAAOC,KAAKjD,KAAKE,SAAS6C,YAAYG,QAAQ,SAACC,GAC7C,GACEN,EAAQE,WAAWK,eAAeD,WAC3BN,EAAQE,WAAWI,WACjBL,EAAK5C,SAAS6C,WAAWI,GAClC,CACA,GAAgC,KAA5BN,EAAQE,WAAWI,GACrB,OAEFL,EAAK5C,SAAS6C,WAAWI,GAAON,EAAQE,WAAWI,EACrD,CACF,GAEKnD,KAAKE,SAAS6C,WAAWM,WAAWC,SACvCtD,KAAKE,SAAS6C,WAAWM,WAAWC,OAAS,IAE1CtD,KAAKE,SAAS6C,WAAWM,WAAWE,UACvCvD,KAAKE,SAAS6C,WAAWM,WAAWE,QAAU,CAAA,IAGlDvD,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQC,IAC1CxD,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQC,KAC5CxD,KAAKE,SAAS6C,WAAWM,WAAWC,OACtCtD,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQE,OAC1CzD,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQE,QAC5CzD,KAAKE,SAAS6C,WAAWM,WAAWC,OACtCtD,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQG,KAC1C1D,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQG,MAC5C1D,KAAKE,SAAS6C,WAAWM,WAAWC,OACtCtD,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQI,MAC1C3D,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQC,KAC5CxD,KAAKE,SAAS6C,WAAWM,WAAWC,cAC3BtD,KAACE,SAAS6C,WAAWM,WAAWC,OACrCT,GAAW7C,KAAKE,SAAS6C,WAAWM,WAAWO,OACnD5D,KAAKE,SAAS6C,WAAWM,WAAWO,KAAO,CACzCC,KAAKC,IAAI,IAAK9D,KAAKE,SAAS6D,OAC1B/D,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQG,KAC5C1D,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQI,MAC9CE,KAAKC,IAAI,IAAK9D,KAAKE,SAAS8D,QAC1BhE,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQC,IAC5CxD,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQE,QAC3CzD,KAAKE,SAAS6C,WAAWkB,eACsB,EAA5CjE,KAAKE,SAAS6C,WAAWmB,iBAAuB,GAChD,IACuC,KAA1ClE,KAAKE,SAAS6C,WAAWoB,aACwB,EAA9CnE,KAAKE,SAAS6C,WAAWqB,mBAAyB,GAClD,IAGZ,EAAClD,EAEDmD,YAAA,SAAYC,EAAYzB,GAEtB7C,KAAKE,SAAW,CACdqE,cAAe,IACfC,eAAgB,IAChBC,oBAAqB,EACrBC,oBAAqB,EACrBC,qBAAsB,IACtBC,sBAAuB,IACvBb,MAAO,IACPC,OAAQ,IACRa,MAAO,EACPC,QAAQ,EACRC,6BAA8B,QAC9BC,wBAAwB,EACxBC,kBAAmB,GACnBC,mBAAmB,EACnBC,sBAAuB,CACrBC,MAAO,IAETrC,WAAY,CACVsC,YAAa,GACbhC,WAAY,CAAEC,OAAQ,GAAIC,QAAS,CAAG,GACtCU,gBAAgB,EAChBE,aAAc,GACdmB,kBAAmB,YACnBpB,iBAAkB,GAClBE,mBAAoB,IAEtBmB,OAAQ,MAIN1C,GAAWA,EAAQ2B,gBAAkB3B,EAAQ0B,eAC/CvE,KAAKE,SAASsE,eAAiB3B,EAAQ2B,eACvCxE,KAAKE,SAASqE,cAAgB1B,EAAQ0B,gBAEtCvE,KAAKE,SAASsE,gBACkD,IAA9DF,EAAWhC,MAAMkD,iBAAiB,UAAUC,QAAQ,MACnDnB,EAAWoB,aAAa,YAC6B,IAApDpB,EAAWoB,aAAa,UAAUD,QAAQ,KACxCnB,EAAWqB,UAAU3B,OACrBM,EAAWsB,wBAAwB5B,OACzChE,KAAKE,SAASqE,eACiD,IAA7DD,EAAWhC,MAAMkD,iBAAiB,SAASC,QAAQ,MAClDnB,EAAWoB,aAAa,WAC4B,IAAnDpB,EAAWoB,aAAa,SAASD,QAAQ,KACvCnB,EAAWqB,UAAU5B,MACrBO,EAAWsB,wBAAwB7B,OAG3C,IAAM8B,EAAUvB,EAAWoB,aAAa,WACxC,GAAIG,EAAS,CAAA,IAAAC,EAAAC,EAAAC,EAAAC,EACLC,EAASL,EAAQM,MAAM,UAC7BnG,KAAKE,SAASuE,oBAA+BqB,OAAZA,EAAGI,EAAO,IAAEJ,EAAI,EACjD9F,KAAKE,SAASwE,oBAA+B,OAAZqB,EAAGG,EAAO,IAAEH,EAAI,EACjD/F,KAAKE,SAASyE,qBAAgCqB,OAAZA,EAAGE,EAAO,IAAEF,EAAI,IAClDhG,KAAKE,SAAS0E,sBAAiC,OAAZqB,EAAGC,EAAO,IAAED,EAAI,GACrD,MACEjG,KAAKE,SAASuE,oBAAsB,EACpCzE,KAAKE,SAASwE,oBAAsB,EACpC1E,KAAKE,SAASyE,qBAAuByB,IACrCpG,KAAKE,SAAS0E,sBAAwBwB,IAIpCvD,GAAWA,EAAQgC,OAAkC,iBAAlBhC,EAAQgC,QAC7C7E,KAAKE,SAAS2E,MAAQhC,EAAQgC,OAE3BhC,GAAYA,EAAQmB,OAEY,iBAAnBnB,EAAQmB,SACxBhE,KAAKE,SAAS8D,OAASnB,EAAQmB,OAAShE,KAAKE,SAAS2E,OAFtD7E,KAAKE,SAAS8D,OAAShE,KAAKE,SAASsE,eAAiBxE,KAAKE,SAAS2E,MAIjEhC,GAAYA,EAAQkB,MAEW,iBAAlBlB,EAAQkB,QACxB/D,KAAKE,SAAS6D,MAAQlB,EAAQkB,MAAQ/D,KAAKE,SAAS2E,OAFpD7E,KAAKE,SAAS6D,MAAQ/D,KAAKE,SAASqE,cAAgBvE,KAAKE,SAAS2E,MAIhEhC,IAA8B,IAAnBA,EAAQiC,SACrB9E,KAAKE,SAAS4E,QAAS,GAErBjC,GAAWA,EAAQkC,+BACrB/E,KAAKE,SAAS6E,6BACZlC,EAAQkC,8BAERlC,GAAWA,EAAQmC,yBACrBhF,KAAKE,SAAS8E,uBAAyBnC,EAAQmC,wBAG/CnC,GACAA,EAAQwD,sBACgC,iBAAjCxD,EAAQwD,uBAEfrG,KAAKE,SAAS+E,kBAAoBX,EAAWgC,iBAC3CzD,EAAQwD,uBAGRxD,GAAWA,EAAQ0C,QAAoC,mBAAnB1C,EAAQ0C,SAC9CvF,KAAKE,SAASqF,OAAS1C,EAAQ0C,QAE7B1C,GAAWA,EAAQsC,wBACrBnF,KAAKE,SAASiF,sBAAwBtC,EAAQsC,uBAE5CtC,GAAWA,EAAQqC,oBACrBlF,KAAKE,SAASgF,kBAAoBrC,EAAQqC,mBAG5ClF,KAAK4C,eAAeC,EACtB,EAAC3B,EAEDqF,yBAAA,SAAyBC,EAASC,GAAcC,IAAAA,EAC9C1G,KAAA,GAAgC,mBAArB2G,iBAAX,CAOA,IAAK,IAAIC,EAAI,EAAGA,EAAI5G,KAAKE,SAAS+E,kBAAkB4B,OAAQD,IAC1D,GAAI5G,KAAKE,SAAS+E,kBAAkB2B,KAAOH,EAEzC,OAIJ,IAAIK,EAAaC,OAAOJ,iBAAiBH,GACzC,GAAIM,EAAWD,OAAS,EACtB,IAAAG,IAAkCC,EAAlCD,EAAAE,EAAwBJ,KAAUG,EAAAD,KAAAG,MAAE,CAAA,IAAzBC,EAASH,EAAAI,OAIT,IAFP,CAAC,QAAS,SAAU,cAAe,cAAc5B,QAC/C2B,IAGFX,EAAanE,MAAMgF,YACjBF,EACAN,EAAWtB,iBAAiB4B,GAGlC,CAIFZ,EAAQe,WAAWrE,QAAQ,SAACsE,EAAOC,GACV,IAAnBD,EAAMrF,UACRuE,EAAKH,yBACHiB,EACAf,EAAac,WAAWG,SAASD,EAAO,KAG9C,EAjCA,MAJEzH,KAAKqB,WACH,sEAqCN,EAACH,EAEDyG,SAAA,SAASrD,EAAYsD,EAAaC,QACR,IAAbA,IACTA,GAAW,GAET7H,KAAKE,SAAS4E,QAAiC,iBAAhB8C,IACjC5H,KAAKuG,yBAAyBqB,EAAatD,GAC3CA,EAAWhC,MAAMC,QAAU,MAG7BvC,KAAKE,SAAS+E,kBAAkB/B,QAAQ,SAACsD,GACvCA,EAAQsB,QACV,GAEAxD,EAAWhC,MAAMyB,MAAQ,KACzBO,EAAWhC,MAAM0B,OAAS,KAC1BM,EAAWyD,aAAa,QAAS/H,KAAKE,SAAS6D,OAC/CO,EAAWyD,aAAa,SAAU/H,KAAKE,SAAS8D,QAChDM,EAAWyD,aAAa,sBAAuB,QAC/CzD,EAAWyD,aACT,UACA/H,KAAKE,SAASuE,oBACZ,IACAzE,KAAKE,SAASwE,oBACd,KACCsD,MAAMhI,KAAKE,SAASyE,sBACjB3E,KAAKE,SAASqE,cACdvE,KAAKE,SAASyE,sBAClB,KACCqD,MAAMhI,KAAKE,SAAS0E,uBACjB5E,KAAKE,SAASsE,eACdxE,KAAKE,SAAS0E,wBAItB,IADA,IAAIqD,EAAWpG,SAASqG,uBAAuB,wBACxCD,EAASpB,OAAS,GACvBoB,EAAS,GAAGE,WAAWC,YAAYH,EAAS,IAI9C,GAAIJ,EAAU,CACZ,IAEIQ,GAFa,IAAIC,eAGlBC,kBAAkBjE,GAClBkE,QAAQ,gBAAiB,SAkB5B,OAdGH,EAAUI,MAAM,yDAEjBJ,EAAYA,EAAUG,QACpB,QACA,4CAGCH,EAAUI,MAAM,qDACnBJ,EAAYA,EAAUG,QACpB,QACA,oDAIGH,CACT,CACA,OAAO/D,CACT,EAACpD,EAEDwH,yBAAA,SAAyBC,GAEvB,IAAMC,EAAO5I,KACb,OAAW,IAAA6I,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAW,IAAIC,MAErBD,EAASE,OAAS,WAChB,IAAMC,EAAStH,SAASC,cAAc,UAEtCqH,EAAOpF,MACLiF,EAASI,cACTJ,EAAStD,aAAa,UACtBsD,EAAS1G,MAAMkD,iBAAiB,UAChC,IACF2D,EAAOnF,OACLgF,EAASK,eACTL,EAAStD,aAAa,WACtBsD,EAAS1G,MAAMkD,iBAAiB,WAChC,IAEF2D,EAAOG,WAAW,MAAMC,UAAUP,EAAU,EAAG,GAE/C,IAAMQ,EAAUL,EAAOM,UAAU,aACjCd,EAAMZ,aAAa,OAAQyB,GAC3BV,GACF,EAEIF,EAAK1I,SAAS8E,yBAChBgE,EAASU,YAAc,aAEzBV,EAASW,IACPhB,EAAMjD,aAAa,SACnBiD,EAAMiB,eAAe,+BAAgC,OACzD,EACF,EAAC1I,EAED2I,eAAA,SAAeC,GACb,IAAIC,EAAW,GAef,OAdAD,EAAS5G,QAAQ,SAAC8G,GAChB,IAAIC,EAAU,IAAIpB,QAAQ,SAACC,EAASC,GAClC,IAAImB,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,WACA,IAAnBF,EAAIG,YAAmC,MAAfH,EAAII,QAC9BxB,EAAQoB,EAAIK,SAEhB,EACAL,EAAIM,KAAK,MAAOR,GAAS,GACzBE,EAAIO,aAAe,cACnBP,EAAIQ,KAAK,KACX,GACAX,EAASY,KAAKV,EAChB,GACOF,CACT,EAAC7I,EAED0J,gBAAA,SAAgBC,EAAKC,EAAM3B,GAEzB,GADA2B,EAAOA,EAAKtC,QAAQ,iBAAkB,KAClCuC,UAAUC,WAAY,CAIxB,IAHA,IAAIC,EAASC,mBAAmBL,EAAI1E,MAAM,KAAK,IAC7CgF,EAAQ,GACNC,EAAaP,EAAI1E,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGA,MAAM,KAAK,GACnDS,EAAI,EAAGA,EAAIqE,EAAOpE,OAAQD,IACjCuE,EAAMR,KAAKM,EAAOI,WAAWzE,IAE/B,IAAI0E,EAEFA,EADY,MAAVnC,EACKA,EAAOoC,WAEP,IAAIC,KAAK,CAAC,IAAIC,WAAWN,IAAS,CAAEO,KAAMN,IAEnDL,UAAUC,WAAWM,EAAMR,EAC7B,KAAO,CACL,IAAIa,EAAO9J,SAASC,cAAc,KAClC6J,EAAKC,SAAWd,EAChBa,EAAKE,KAAOhB,EACZhJ,SAASc,KAAKH,YAAYmJ,GAC1BA,EAAKG,QACLjK,SAASc,KAAKyF,YAAYuD,EAC5B,CACI3L,KAAKE,SAASqF,QAChBvF,KAAKE,SAASqF,QAElB,EAACrE,EAED6K,YAAA,SAAYpK,EAAKqK,EAASnJ,GAAS,IAAAoJ,EAAAjM,KAClB,MAAXgM,IACFA,EAAU,SAGZ,IAAME,EAAwB,WAC5B,IAAM5H,EAAa2H,EAAKvK,eAAeC,GACvC,GAAK2C,EAAL,CAGA2H,EAAK5H,YAAYC,EAAYzB,GAE7B,IAAMsJ,EAAS7H,EAAW8H,qBAAqB,SACzCC,EAAiB,GAEvB,GAAIF,EACF,IAAAG,IAAwBC,EAAxBD,EAAApF,EAAkBiF,KAAMI,EAAAD,KAAAnF,MAAE,CAAA,IAAjBwB,EAAK4D,EAAAlF,OAETsB,EAAMjD,aAAa,UAC+B,IAAjDiD,EAAMjD,aAAa,QAAQD,QAAQ,UACpCkD,EAAMjD,aAAa,gBACqC,IAAvDiD,EAAMjD,aAAa,cAAcD,QAAQ,WAE3C4G,EAAe1B,KAAKsB,EAAKvD,yBAAyBC,GAEtD,CAGFE,QAAQ2D,IAAIH,GAAgBI,KAAK,WAE/B,IAAIpE,EAAY4D,EAAKtE,SAASrD,EAAY3C,GAG1C0G,EAAY,4CAA8CA,EAG1D,IAAIqE,EACF,oCAAsCC,mBAAmBtE,GAE3D4D,EAAKrB,gBAAgB8B,EAAKV,EAAU,OACtC,EA/BA,CAgCF,EAEA,GAAInJ,EAAQqC,kBAAmB,CAC7B,IAAM0H,EAAW,IAAQ5M,KAACa,YAAYc,EAAKkB,EAAQsC,uBACnDyH,EAASC,aAAaJ,KAAK,WACzBP,IACAU,EAASE,SACX,EACF,MACEZ,GAIJ,EAAChL,EAEK6L,eAAc,SAACpL,EAAKqK,EAASnJ,EAASmK,GAAW,IAAA,IAAAC,EAChDjN,KAAL,IAAKiN,EAAKlM,UAIR,OAHAkM,EAAK5L,WACH,sGAEFwH,QAAAC,UAIgB,SADlBkE,EAAYA,EAAUE,cAAc1E,QAAQ,MAAO,UACV,SAAdwE,IACzBA,EAAY,OAEd,IAAM1I,EAAa2I,EAAKvL,eAAeC,GACvC,IAAK2C,EACH,OAAAuE,QAAAC,UAEa,MAAXkD,IACFA,EAAU,SAIPnJ,IACHA,EAAU,CACZ,GAEAoK,EAAK5I,YAAYC,EAAYzB,GAC7B,IAAIwF,EAAY4E,EAAKtF,SAASrD,EAAY3C,GAExB,SAAdqL,IAEF3E,EAAYA,EAAUG,QACpB,IACA,6BACEyE,EAAK/M,SAAS6D,MACd,aACAkJ,EAAK/M,SAAS8D,OACd,WACAiJ,EAAK/M,SAAS6E,6BACd,QAGNsD,EAAY4E,EAAKE,qBAAqB9E,GACtC,IAAIc,EAAS,IAAIiE,gBAAgBH,EAAK/M,SAAS6D,MAAOkJ,EAAK/M,SAAS8D,QAC9DqJ,EAASJ,EAAKtM,SAAS2M,YAC7BD,EAAOE,qBAAuBN,EAAK/M,SAAS8E,uBAC5C,IAAIwI,EAAMrE,EAAOG,WAAW,MAExBmE,EAAIR,EAAK9M,OAAOuN,WAAWF,EAAKnF,EAAWgF,GAgB5C,OAfHI,EAAEE,QAEFF,EAAEG,QAAQnB,KAAK,WAEbtD,EACG0E,cAAc,CACbnC,KAHuB,SAAdsB,EAAuB,aAAe,cAKhDP,KAAK,SAACnB,GACL,IAAMwC,EAASC,IAAIC,gBAAgB1C,GAInC2B,EAAKrC,gBAAgBkD,EAAQ9B,EAAU,IAAMgB,EAAW7D,EAC1D,EACJ,GAAGN,QAAAC,SACL,CAAC,MAAAmF,GAAApF,OAAAA,QAAAE,OAAAkF,EAAA/M,CAAAA,EAAAA,EAEDiM,qBAAA,SAAqBe,GAGnB,OAAOA,EAAU1F,QAAQ,qCAAsC,GACjE,EAACtH,EAEDiN,YAAA,SAAYxM,EAAKqK,EAASnJ,GACxB7C,KAAK+M,eAAepL,EAAKqK,EAASnJ,EAAS,MAC7C,EAAC3B,EACDkN,aAAA,SAAazM,EAAKqK,EAASnJ,GACzB7C,KAAK+M,eAAepL,EAAKqK,EAASnJ,EAAS,OAC7C,EAAC3B,EAEDmN,WAAA,SAAWC,EAAKtC,EAASrK,GAEnB3B,KAAKE,SAAS6C,WAAWkB,gBAC3BqK,EACGC,KAAKvO,KAAKE,SAAS6C,WAAWuC,mBAC9BkJ,SAASxO,KAAKE,SAAS6C,WAAWmB,kBAClCuK,KAAKzC,EAAS,CACbjI,MACE/D,KAAKE,SAAS6C,WAAWM,WAAWO,KAAK,GACzC5D,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQG,KAC5C1D,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQI,QAIpD3D,KAAKO,UACH+N,EACA3M,EACA3B,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQG,KAC5C4K,EAAII,EAAI,GACR,CACE3K,MAAO/D,KAAKE,SAAS6D,MACrBC,OAAQhE,KAAKE,SAAS8D,OACtB2K,oBAAqB,OACrB7J,OAAQ9E,KAAKE,SAAS4E,SAKoB,KAA1C9E,KAAKE,SAAS6C,WAAWoB,cAC3BmK,EACGC,KAAKvO,KAAKE,SAAS6C,WAAWuC,mBAC9BkJ,SAASxO,KAAKE,SAAS6C,WAAWqB,oBAClCqK,KACCzO,KAAKE,SAAS6C,WAAWoB,aACzBnE,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQG,KAC5C1D,KAAKE,SAAS6C,WAAWM,WAAWO,KAAK,GACvC5D,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQE,OACE,EAA9CzD,KAAKE,SAAS6C,WAAWqB,mBAC3B,CACEL,MACE/D,KAAKE,SAAS6C,WAAWM,WAAWO,KAAK,GACzC5D,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQG,KAC5C1D,KAAKE,SAAS6C,WAAWM,WAAWE,QAAQI,OAIxD,EAACzC,EACD0N,YAAA,SAAYjN,EAAKqK,EAASnJ,GAASgM,IAAAA,EAEjC7O,KAAA,GAAKA,KAAKgB,QAAV,CAOA,IAAMsD,EAAatE,KAAK0B,eAAeC,GACvC,GAAK2C,EAAL,CAGe,MAAX0H,IACFA,EAAU,SAEZhM,KAAKqE,YAAYC,EAAYzB,GAC7B,IAAMiM,EAAY9O,KAAK2H,SAASrD,EAAY3C,GAAK,GAG3C2M,EAAM,IAAItO,KAAKK,QAAQL,KAAKE,SAAS6C,WAAWM,YAChD0L,EAAST,EAAIU,KAAKhP,KAAKS,eAGzB0L,EAAS7H,EAAW8H,qBAAqB,SACzCC,EAAiB,GACrB,GAAIF,EACF,IAAA8C,IAAwBC,EAAxBD,EAAA/H,EAAkBiF,KAAM+C,EAAAD,KAAA9H,MAAE,CAAA,IAAjBwB,EAAKuG,EAAA7H,OAETsB,EAAMjD,aAAa,UAC+B,IAAjDiD,EAAMjD,aAAa,QAAQD,QAAQ,UACpCkD,EAAMjD,aAAa,gBACqC,IAAvDiD,EAAMjD,aAAa,cAAcD,QAAQ,WAE3C4G,EAAe1B,KAAK3K,KAAK0I,yBAAyBC,GAEtD,CAIFE,QAAQ2D,IAAIH,GAAgBI,KAAK,WAC/B,GAAIoC,EAAK3O,SAAS6C,WAAWsC,YAAYwB,OAAS,EAAG,CACnD,IAAIsI,EAAgBN,EAAKhF,eACvBgF,EAAK3O,SAAS6C,WAAWsC,YAAY+J,IAAI,SAACC,GAAM,OAAAA,EAAE3C,GAAG,IAEvD7D,QAAQ2D,IAAI2C,GAAe1C,KAAK,SAACrH,GAC/BA,EAAMlC,QAAQ,SAACqL,EAAM9G,GACnB,IAAI6H,EACFT,EAAK3O,SAAS6C,WAAWsC,YAAYqC,SAASD,EAAO,KAC9BqH,EAAUxI,iBACjC,YAAcgJ,EAAeC,SAAW,MAEvBrM,QAAQ,SAACsD,GAC1BA,EAAQlE,MAAMkN,WAAaF,EAAeC,QAC5C,IAE2C,IAAxCD,EAAe5C,IAAIjH,QAAQ,UACgB,IAA1C6J,EAAe5C,IAAIjH,QAAQ,YAC7B6J,EAAeG,UAQfnB,EAAIoB,aAAaJ,EAAeC,SAAUhB,GAN1CD,EAAIoB,aACFJ,EAAeC,SACfhB,EACAe,EAAeG,UAKrB,GACAZ,EAAKR,WAAWC,EAAKtC,EAAS8C,GAC9BR,EAAIqB,KACN,EACF,MACEd,EAAKR,WAAWC,EAAKtC,EAAS8C,GAC9BR,EAAIqB,KAER,GAEAZ,EAAOa,GAAG,SAAU,WAClB,IAAIlD,EAAMqC,EAAOc,UAAU,mBAC3BhB,EAAKjE,gBAAgB8B,EAAKV,EAAU,OACtC,EArEA,CALA,MAJEhM,KAAKqB,WACH,+EA8EN,EAACvB,CAAA,CAnrBY,GAurBQ,iBAAZgQ,SAA0C,oBAAXC,OACxCA,OAAOD,QAAUhQ,EACU,mBAAXkQ,QAAyBA,OAAOC,IAChDD,OAAO,WACL,OAAOlQ,CACT,IAEuB,oBAAfoQ,WAA6BA,WAAatH,MAAM9I,UAAYA"}