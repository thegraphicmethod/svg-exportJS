{"version":3,"file":"svg-export.modern.js","sources":["../src/svg-export.js"],"sourcesContent":["/*\n * svg-export.js - Javascript SVG parser and renderer on Canvas\n * version 1.2.0\n * MIT Licensed\n * Sharon Choong (https://sharonchoong.github.io/about.html)\n * https://sharonchoong.github.io/svg-export\n *\n */\n\nclass SvgExport {\n  constructor(dependencies = {}) {\n    this.version = \"1.2.0\";\n    this._options = {};\n\n    // Store dependencies\n    this._canvg = dependencies.canvg;\n    this._pdfkit = dependencies.pdfkit;\n    this._svgToPdf = dependencies.svgToPdf;\n    this._blobStream = dependencies.blobStream;\n    this._presets = dependencies.presets;\n    this._textToPath = dependencies.textToPath;\n\n    // Check available dependencies\n    this._hasCanvg = typeof this._canvg !== \"undefined\";\n    this._hasPDF =\n      typeof this._pdfkit !== \"undefined\" &&\n      typeof this._svgToPdf !== \"undefined\" &&\n      typeof this._blobStream !== \"undefined\";\n    this._hasTextToPath = typeof this._textToPath !== \"undefined\";\n  }\n\n  // Optional method to set dependencies after construction\n  setDependencies(dependencies) {\n    this._canvg = dependencies.canvg;\n    this._pdfkit = dependencies.pdfkit;\n    this._svgToPdf = dependencies.svgToPdf;\n    this._blobStream = dependencies.blobStream;\n    this._textToPath = dependencies.textToPath;\n\n    this._hasCanvg = typeof this._canvg !== \"undefined\";\n    this._hasTextToPath = typeof this._textToPath !== \"undefined\";\n\n    this._hasPDF =\n      typeof this._pdfkit !== \"undefined\" &&\n      typeof this._svgToPdf !== \"undefined\" &&\n      typeof this._blobStream !== \"undefined\";\n  }\n\n  // Private helper methods\n  _warnError(str) {\n    if (typeof console !== undefined && typeof console.warn === \"function\") {\n      console.warn(str);\n    }\n  }\n\n  _getSvgElement(svg) {\n    let div = document.createElement(\"div\");\n    div.className = \"tempdiv-svg-exportJS\";\n\n    if (typeof svg === \"string\") {\n      div.insertAdjacentHTML(\"beforeend\", svg.trim());\n      svg = div.firstChild;\n    }\n\n    if (!svg.nodeType || svg.nodeType !== 1) {\n      this._warnError(\"Error svg-export: The input svg was not recognized\");\n      return null;\n    }\n\n    let svgClone = svg.cloneNode(true);\n    svgClone.style.display = null;\n    div.appendChild(svgClone);\n    div.style.visibility = \"hidden\";\n    div.style.display = \"table\";\n    div.style.position = \"absolute\";\n    document.body.appendChild(div);\n    return svgClone;\n  }\n\n  _setPdfOptions(options) {\n    if (options && options.pdfOptions) {\n      Object.keys(this._options.pdfOptions).forEach((opt) => {\n        if (\n          options.pdfOptions.hasOwnProperty(opt) &&\n          typeof options.pdfOptions[opt] ===\n            typeof this._options.pdfOptions[opt]\n        ) {\n          if (options.pdfOptions[opt] === \"\") {\n            return;\n          }\n          this._options.pdfOptions[opt] = options.pdfOptions[opt];\n        }\n      });\n\n      if (!this._options.pdfOptions.pageLayout.margin) {\n        this._options.pdfOptions.pageLayout.margin = 50;\n      }\n      if (!this._options.pdfOptions.pageLayout.margins) {\n        this._options.pdfOptions.pageLayout.margins = {};\n      }\n    }\n    this._options.pdfOptions.pageLayout.margins.top =\n      this._options.pdfOptions.pageLayout.margins.top ||\n      this._options.pdfOptions.pageLayout.margin;\n    this._options.pdfOptions.pageLayout.margins.bottom =\n      this._options.pdfOptions.pageLayout.margins.bottom ||\n      this._options.pdfOptions.pageLayout.margin;\n    this._options.pdfOptions.pageLayout.margins.left =\n      this._options.pdfOptions.pageLayout.margins.left ||\n      this._options.pdfOptions.pageLayout.margin;\n    this._options.pdfOptions.pageLayout.margins.right =\n      this._options.pdfOptions.pageLayout.margins.top ||\n      this._options.pdfOptions.pageLayout.margin;\n    delete this._options.pdfOptions.pageLayout.margin;\n    if (!(options && this._options.pdfOptions.pageLayout.size)) {\n      this._options.pdfOptions.pageLayout.size = [\n        Math.max(300, this._options.width) +\n          this._options.pdfOptions.pageLayout.margins.left +\n          this._options.pdfOptions.pageLayout.margins.right,\n        Math.max(300, this._options.height) +\n          this._options.pdfOptions.pageLayout.margins.top +\n          this._options.pdfOptions.pageLayout.margins.bottom +\n          (this._options.pdfOptions.addTitleToPage\n            ? this._options.pdfOptions.pdfTitleFontSize * 2 + 10\n            : 0) +\n          (this._options.pdfOptions.chartCaption !== \"\"\n            ? this._options.pdfOptions.pdfCaptionFontSize * 4 + 10\n            : 0),\n      ];\n    }\n  }\n\n  _setOptions(svgElement, options) {\n    // Initialize options for this instance\n    this._options = {\n      originalWidth: 100,\n      originalHeight: 100,\n      originalMinXViewBox: 0,\n      originalMinYViewBox: 0,\n      originalWidthViewbox: 100,\n      originalHeightViewbox: 100,\n      width: 100,\n      height: 100,\n      scale: 1,\n      useCSS: true,\n      transparentBackgroundReplace: \"white\",\n      allowCrossOriginImages: false,\n      elementsToExclude: [],\n      convertTextToPath: false,\n      svgTextToPathSettings: {\n        fonts: [],\n      },\n      pdfOptions: {\n        customFonts: [],\n        pageLayout: { margin: 50, margins: {} },\n        addTitleToPage: true,\n        chartCaption: \"\",\n        pdfTextFontFamily: \"Helvetica\",\n        pdfTitleFontSize: 20,\n        pdfCaptionFontSize: 14,\n      },\n      onDone: null,\n    };\n\n    //original size\n    if (options && options.originalHeight && options.originalWidth) {\n      this._options.originalHeight = options.originalHeight;\n      this._options.originalWidth = options.originalWidth;\n    } else {\n      this._options.originalHeight =\n        svgElement.style.getPropertyValue(\"height\").indexOf(\"%\") !== -1 ||\n        (svgElement.getAttribute(\"height\") &&\n          svgElement.getAttribute(\"height\").indexOf(\"%\") !== -1)\n          ? svgElement.getBBox().height\n          : svgElement.getBoundingClientRect().height;\n      this._options.originalWidth =\n        svgElement.style.getPropertyValue(\"width\").indexOf(\"%\") !== -1 ||\n        (svgElement.getAttribute(\"width\") &&\n          svgElement.getAttribute(\"width\").indexOf(\"%\") !== -1)\n          ? svgElement.getBBox().width\n          : svgElement.getBoundingClientRect().width;\n    }\n\n    const viewBox = svgElement.getAttribute(\"viewBox\");\n    if (viewBox) {\n      const values = viewBox.split(/[\\s,]+/); // Split on one or more spaces or commas\n      this._options.originalMinXViewBox = values[0] ?? 0;\n      this._options.originalMinYViewBox = values[1] ?? 0;\n      this._options.originalWidthViewbox = values[2] ?? 100;\n      this._options.originalHeightViewbox = values[3] ?? 100;\n    } else {\n      this._options.originalMinXViewBox = 0;\n      this._options.originalMinYViewBox = 0;\n      this._options.originalWidthViewbox = NaN;\n      this._options.originalHeightViewbox = NaN;\n    }\n\n    //custom options\n    if (options && options.scale && typeof options.scale === \"number\") {\n      this._options.scale = options.scale;\n    }\n    if (!options || !options.height) {\n      this._options.height = this._options.originalHeight * this._options.scale;\n    } else if (typeof options.height === \"number\") {\n      this._options.height = options.height * this._options.scale;\n    }\n    if (!options || !options.width) {\n      this._options.width = this._options.originalWidth * this._options.scale;\n    } else if (typeof options.width === \"number\") {\n      this._options.width = options.width * this._options.scale;\n    }\n    if (options && options.useCSS === false) {\n      this._options.useCSS = false;\n    }\n    if (options && options.transparentBackgroundReplace) {\n      this._options.transparentBackgroundReplace =\n        options.transparentBackgroundReplace;\n    }\n    if (options && options.allowCrossOriginImages) {\n      this._options.allowCrossOriginImages = options.allowCrossOriginImages;\n    }\n    if (\n      options &&\n      options.excludeByCSSSelector &&\n      typeof options.excludeByCSSSelector === \"string\"\n    ) {\n      this._options.elementsToExclude = svgElement.querySelectorAll(\n        options.excludeByCSSSelector\n      );\n    }\n    if (options && options.onDone && typeof options.onDone === \"function\") {\n      this._options.onDone = options.onDone;\n    }\n    if (options && options.svgTextToPathSettings) {\n      this._options.svgTextToPathSettings = options.svgTextToPathSettings;\n    }\n    if (options && options.convertTextToPath) {\n      this._options.convertTextToPath = options.convertTextToPath;\n    }\n\n    this._setPdfOptions(options);\n  }\n\n  useCSSfromComputedStyles(element, elementClone) {\n    if (typeof getComputedStyle !== \"function\") {\n      this._warnError(\n        \"Warning svg-export: this browser is not able to get computed styles\"\n      );\n      return;\n    }\n\n    for (let i = 0; i < this._options.elementsToExclude.length; i++) {\n      if (this._options.elementsToExclude[i] === elementClone) {\n        // prevent continuation of this function if user wants to exclude the child element\n        return;\n      }\n    }\n\n    let compStyles = window.getComputedStyle(element);\n    if (compStyles.length > 0) {\n      for (const compStyle of compStyles) {\n        if (\n          [\"width\", \"height\", \"inline-size\", \"block-size\"].indexOf(\n            compStyle\n          ) === -1\n        ) {\n          elementClone.style.setProperty(\n            compStyle,\n            compStyles.getPropertyValue(compStyle)\n          );\n        }\n      }\n    }\n\n    // Use arrow function to preserve 'this' context\n    element.childNodes.forEach((child, index) => {\n      if (child.nodeType === 1 /*Node.ELEMENT_NODE*/) {\n        this.useCSSfromComputedStyles(\n          child,\n          elementClone.childNodes[parseInt(index, 10)]\n        );\n      }\n    });\n  }\n\n  setupSvg(svgElement, originalSvg, asString) {\n    if (typeof asString === \"undefined\") {\n      asString = true;\n    }\n    if (this._options.useCSS && typeof originalSvg === \"object\") {\n      this.useCSSfromComputedStyles(originalSvg, svgElement);\n      svgElement.style.display = null;\n    }\n\n    this._options.elementsToExclude.forEach((element) => {\n      element.remove();\n    });\n\n    svgElement.style.width = null;\n    svgElement.style.height = null;\n    svgElement.setAttribute(\"width\", this._options.width);\n    svgElement.setAttribute(\"height\", this._options.height);\n    svgElement.setAttribute(\"preserveAspectRatio\", \"none\");\n    svgElement.setAttribute(\n      \"viewBox\",\n      this._options.originalMinXViewBox +\n        \" \" +\n        this._options.originalMinYViewBox +\n        \" \" +\n        (isNaN(this._options.originalWidthViewbox)\n          ? this._options.originalWidth\n          : this._options.originalWidthViewbox) +\n        \" \" +\n        (isNaN(this._options.originalHeightViewbox)\n          ? this._options.originalHeight\n          : this._options.originalHeightViewbox)\n    );\n\n    let elements = document.getElementsByClassName(\"tempdiv-svg-exportJS\");\n    while (elements.length > 0) {\n      elements[0].parentNode.removeChild(elements[0]);\n    }\n\n    //get svg string\n    if (asString) {\n      let serializer = new XMLSerializer();\n      //setting currentColor to black matters if computed styles are not used\n      let svgString = serializer\n        .serializeToString(svgElement)\n        .replace(/currentColor/g, \"black\");\n\n      //add namespaces\n      if (\n        !svgString.match(/^<svg[^>]+xmlns=\"http\\:\\/\\/www\\.w3\\.org\\/2000\\/svg\"/)\n      ) {\n        svgString = svgString.replace(\n          /^<svg/,\n          '<svg xmlns=\"http://www.w3.org/2000/svg\"'\n        );\n      }\n      if (!svgString.match(/^<svg[^>]+\"http\\:\\/\\/www\\.w3\\.org\\/1999\\/xlink\"/)) {\n        svgString = svgString.replace(\n          /^<svg/,\n          '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\"'\n        );\n      }\n\n      return svgString;\n    }\n    return svgElement;\n  }\n\n  convertImageURLtoDataURI(image) {\n    // Preserve this context for use inside Promise and event handlers\n    const self = this;\n    return new Promise((resolve, reject) => {\n      const newImage = new Image();\n\n      newImage.onload = () => {\n        const canvas = document.createElement(\"canvas\");\n        // Use newImage directly since we know that's what we want\n        canvas.width =\n          newImage.naturalWidth ||\n          newImage.getAttribute(\"width\") ||\n          newImage.style.getPropertyValue(\"width\") ||\n          300;\n        canvas.height =\n          newImage.naturalHeight ||\n          newImage.getAttribute(\"height\") ||\n          newImage.style.getPropertyValue(\"height\") ||\n          300;\n\n        canvas.getContext(\"2d\").drawImage(newImage, 0, 0);\n\n        const dataURI = canvas.toDataURL(\"image/png\");\n        image.setAttribute(\"href\", dataURI);\n        resolve();\n      };\n\n      if (self._options.allowCrossOriginImages) {\n        newImage.crossOrigin = \"anonymous\";\n      }\n      newImage.src =\n        image.getAttribute(\"href\") ||\n        image.getAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\");\n    });\n  }\n\n  getCustomFonts(fontUrls) {\n    let promises = [];\n    fontUrls.forEach((fontUrl) => {\n      let promise = new Promise((resolve, reject) => {\n        let req = new XMLHttpRequest();\n        req.onreadystatechange = () => {\n          if (req.readyState === 4 && req.status === 200) {\n            resolve(req.response);\n          }\n        };\n        req.open(\"GET\", fontUrl, true);\n        req.responseType = \"arraybuffer\";\n        req.send(null);\n      });\n      promises.push(promise);\n    });\n    return promises;\n  }\n\n  triggerDownload(uri, name, canvas) {\n    name = name.replace(/[/\\\\?%*:|\"<>]/g, \"_\");\n    if (navigator.msSaveBlob) {\n      let binary = decodeURIComponent(uri.split(\",\")[1]),\n        array = [];\n      let mimeString = uri.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n      for (let i = 0; i < binary.length; i++) {\n        array.push(binary.charCodeAt(i));\n      }\n      let blob = null;\n      if (canvas != null) {\n        blob = canvas.msToBlob();\n      } else {\n        blob = new Blob([new Uint8Array(array)], { type: mimeString });\n      }\n      navigator.msSaveBlob(blob, name);\n    } else {\n      let link = document.createElement(\"a\");\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n    if (this._options.onDone) {\n      this._options.onDone();\n    }\n  }\n\n  downloadSvg(svg, svgName, options) {\n    if (svgName == null) {\n      svgName = \"chart\";\n    }\n\n    const processSvgAndDownload = () => {\n      const svgElement = this._getSvgElement(svg);\n      if (!svgElement) {\n        return;\n      }\n      this._setOptions(svgElement, options);\n      // -custom images\n      const images = svgElement.getElementsByTagName(\"image\");\n      const image_promises = [];\n\n      if (images) {\n        for (let image of images) {\n          if (\n            (image.getAttribute(\"href\") &&\n              image.getAttribute(\"href\").indexOf(\"data:\") === -1) ||\n            (image.getAttribute(\"xlink:href\") &&\n              image.getAttribute(\"xlink:href\").indexOf(\"data:\") === -1)\n          ) {\n            image_promises.push(this.convertImageURLtoDataURI(image));\n          }\n        }\n      }\n\n      Promise.all(image_promises).then(() => {\n        //get svg string\n        let svgString = this.setupSvg(svgElement, svg);\n\n        //add xml declaration\n        svgString = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n' + svgString;\n\n        //convert svg string to URI data scheme.\n        let url =\n          \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(svgString);\n\n        this.triggerDownload(url, svgName + \".svg\");\n      });\n    };\n    \n    if (options.convertTextToPath) {\n      const mysesion = new this._textToPath(svg, options.svgTextToPathSettings);\n      mysesion.replaceAll().then(() => {\n        processSvgAndDownload();\n        mysesion.destroy();\n      });\n    } else {\n      processSvgAndDownload();\n    }\n\n    \n  }\n\n  async downloadRaster(svg, svgName, options, imageType) {\n    if (!this._hasCanvg) {\n      this._warnError(\n        \"Error svg-export: PNG/JPEG export requires Canvg. Install it via npm or include it via script tag.\"\n      );\n      return;\n    }\n\n    imageType = imageType.toLowerCase().replace(\"jpg\", \"jpeg\");\n    if (imageType !== \"png\" && imageType !== \"jpeg\") {\n      imageType = \"png\";\n    }\n    const svgElement = this._getSvgElement(svg);\n    if (!svgElement) {\n      return;\n    }\n    if (svgName == null) {\n      svgName = \"chart\";\n    }\n    //get canvas and svg element.\n\n    if (!options) {\n      options = {};\n    }\n\n    this._setOptions(svgElement, options);\n    let svgString = this.setupSvg(svgElement, svg);\n\n    if (imageType === \"jpeg\") {\n      //change transparent background to white\n      svgString = svgString.replace(\n        \">\",\n        '><rect x=\"0\" y=\"0\" width=\"' +\n          this._options.width +\n          '\" height=\"' +\n          this._options.height +\n          '\" fill=\"' +\n          this._options.transparentBackgroundReplace +\n          '\"/>'\n      );\n    }\n    svgString = this.removeBreakingStyles(svgString);\n    let canvas = new OffscreenCanvas(this._options.width, this._options.height);\n    const preset = this._presets.offscreen();\n    preset.anonymousCrossOrigin = this._options.allowCrossOriginImages;\n    let ctx = canvas.getContext(\"2d\");\n\n    let v = this._canvg.fromString(ctx, svgString, preset);\n    v.start();\n    // await new Promise((resolve) => setTimeout(resolve, 500));\n    v.ready().then(() => {\n      const type = imageType === \"jpeg\" ? \"image/jpeg\" : \"image/png\";\n      canvas\n        .convertToBlob({\n          type,\n        })\n        .then((blob) => {\n          const imgUrl = URL.createObjectURL(blob);\n          //let img = new Image();\n          //img.src = imgUrl;\n          //document.getElementById(\"teleports\").appendChild(img);\n          this.triggerDownload(imgUrl, svgName + \".\" + imageType, canvas);\n        });\n    });\n  }\n\n  removeBreakingStyles(domString) {\n    // I found that \"mask: none; mask-type: luminance;\" breaks canvavg conversion\n    // so I need to remove it\n    return domString.replace(/mask: none; mask-type: luminance;/g, \"\");\n  }\n\n  downloadPng(svg, svgName, options) {\n    this.downloadRaster(svg, svgName, options, \"png\");\n  }\n  downloadJpeg(svg, svgName, options) {\n    this.downloadRaster(svg, svgName, options, \"jpeg\");\n  }\n\n  fillPDFDoc(doc, svgName, svg) {\n    // -title\n    if (this._options.pdfOptions.addTitleToPage) {\n      doc\n        .font(this._options.pdfOptions.pdfTextFontFamily)\n        .fontSize(this._options.pdfOptions.pdfTitleFontSize)\n        .text(svgName, {\n          width:\n            this._options.pdfOptions.pageLayout.size[0] -\n            this._options.pdfOptions.pageLayout.margins.left -\n            this._options.pdfOptions.pageLayout.margins.right,\n        });\n    }\n    // -svg\n    this._svgToPdf(\n      doc,\n      svg,\n      this._options.pdfOptions.pageLayout.margins.left,\n      doc.y + 10,\n      {\n        width: this._options.width,\n        height: this._options.height,\n        preserveAspectRatio: \"none\",\n        useCSS: this._options.useCSS,\n      }\n    );\n\n    // -caption\n    if (this._options.pdfOptions.chartCaption !== \"\") {\n      doc\n        .font(this._options.pdfOptions.pdfTextFontFamily)\n        .fontSize(this._options.pdfOptions.pdfCaptionFontSize)\n        .text(\n          this._options.pdfOptions.chartCaption,\n          this._options.pdfOptions.pageLayout.margins.left,\n          this._options.pdfOptions.pageLayout.size[1] -\n            this._options.pdfOptions.pageLayout.margins.bottom -\n            this._options.pdfOptions.pdfCaptionFontSize * 4,\n          {\n            width:\n              this._options.pdfOptions.pageLayout.size[0] -\n              this._options.pdfOptions.pageLayout.margins.left -\n              this._options.pdfOptions.pageLayout.margins.right,\n          }\n        );\n    }\n  }\n  downloadPdf(svg, svgName, options) {\n    //check dependency and values\n    if (!this._hasPDF) {\n      this._warnError(\n        \"Error svg-export: PDF export requires PDFKit, blob-stream and SVG-to-PDFKit.\"\n      );\n      return;\n    }\n    //get svg element\n    const svgElement = this._getSvgElement(svg);\n    if (!svgElement) {\n      return;\n    }\n    if (svgName == null) {\n      svgName = \"chart\";\n    }\n    this._setOptions(svgElement, options);\n    const svgCloned = this.setupSvg(svgElement, svg, false);\n\n    //create PDF doc\n    const doc = new this._pdfkit(this._options.pdfOptions.pageLayout);\n    const stream = doc.pipe(this._blobStream());\n\n    // -custom images\n    let images = svgElement.getElementsByTagName(\"image\");\n    let image_promises = [];\n    if (images) {\n      for (let image of images) {\n        if (\n          (image.getAttribute(\"href\") &&\n            image.getAttribute(\"href\").indexOf(\"data:\") === -1) ||\n          (image.getAttribute(\"xlink:href\") &&\n            image.getAttribute(\"xlink:href\").indexOf(\"data:\") === -1)\n        ) {\n          image_promises.push(this.convertImageURLtoDataURI(image));\n        }\n      }\n    }\n\n    // -custom fonts\n    Promise.all(image_promises).then(() => {\n      if (this._options.pdfOptions.customFonts.length > 0) {\n        let font_promises = this.getCustomFonts(\n          this._options.pdfOptions.customFonts.map((d) => d.url)\n        );\n        Promise.all(font_promises).then((fonts) => {\n          fonts.forEach((font, index) => {\n            let thisPdfOptions =\n              this._options.pdfOptions.customFonts[parseInt(index, 10)];\n            let fontStyledElements = svgCloned.querySelectorAll(\n              '[style*=\"' + thisPdfOptions.fontName + '\"]'\n            );\n            fontStyledElements.forEach((element) => {\n              element.style.fontFamily = thisPdfOptions.fontName;\n            });\n            if (\n              (thisPdfOptions.url.indexOf(\".ttc\") !== -1 ||\n                thisPdfOptions.url.indexOf(\".dfont\") !== -1) &&\n              thisPdfOptions.styleName\n            ) {\n              doc.registerFont(\n                thisPdfOptions.fontName,\n                font,\n                thisPdfOptions.styleName\n              );\n            } else {\n              doc.registerFont(thisPdfOptions.fontName, font);\n            }\n          });\n          this.fillPDFDoc(doc, svgName, svgCloned);\n          doc.end();\n        });\n      } else {\n        this.fillPDFDoc(doc, svgName, svgCloned);\n        doc.end();\n      }\n    });\n\n    stream.on(\"finish\", () => {\n      let url = stream.toBlobURL(\"application/pdf\");\n      this.triggerDownload(url, svgName + \".pdf\");\n    });\n  }\n}\n\n// Export for different module systems\nif (typeof exports === \"object\" && typeof module !== \"undefined\") {\n  module.exports = SvgExport;\n} else if (typeof define === \"function\" && define.amd) {\n  define(function () {\n    return SvgExport;\n  });\n} else {\n  (typeof globalThis !== \"undefined\" ? globalThis : self).SvgExport = SvgExport;\n}\nexport default SvgExport;\n"],"names":["SvgExport","constructor","dependencies","this","version","_options","_canvg","canvg","_pdfkit","pdfkit","_svgToPdf","svgToPdf","_blobStream","blobStream","_presets","presets","_textToPath","textToPath","_hasCanvg","_hasPDF","_hasTextToPath","setDependencies","_warnError","str","undefined","console","warn","_getSvgElement","svg","div","document","createElement","className","insertAdjacentHTML","trim","firstChild","nodeType","svgClone","cloneNode","style","display","appendChild","visibility","position","body","_setPdfOptions","options","pdfOptions","Object","keys","forEach","opt","hasOwnProperty","pageLayout","margin","margins","top","bottom","left","right","size","Math","max","width","height","addTitleToPage","pdfTitleFontSize","chartCaption","pdfCaptionFontSize","_setOptions","svgElement","originalWidth","originalHeight","originalMinXViewBox","originalMinYViewBox","originalWidthViewbox","originalHeightViewbox","scale","useCSS","transparentBackgroundReplace","allowCrossOriginImages","elementsToExclude","convertTextToPath","svgTextToPathSettings","fonts","customFonts","pdfTextFontFamily","onDone","getPropertyValue","indexOf","getAttribute","getBBox","getBoundingClientRect","viewBox","_values$","_values$2","_values$3","_values$4","values","split","NaN","excludeByCSSSelector","querySelectorAll","useCSSfromComputedStyles","element","elementClone","getComputedStyle","i","length","compStyles","window","compStyle","setProperty","childNodes","child","index","parseInt","setupSvg","originalSvg","asString","remove","setAttribute","isNaN","elements","getElementsByClassName","parentNode","removeChild","svgString","XMLSerializer","serializeToString","replace","match","convertImageURLtoDataURI","image","self","Promise","resolve","reject","newImage","Image","onload","canvas","naturalWidth","naturalHeight","getContext","drawImage","dataURI","toDataURL","crossOrigin","src","getAttributeNS","getCustomFonts","fontUrls","promises","fontUrl","promise","req","XMLHttpRequest","onreadystatechange","readyState","status","response","open","responseType","send","push","triggerDownload","uri","name","navigator","msSaveBlob","binary","decodeURIComponent","array","mimeString","charCodeAt","blob","msToBlob","Blob","Uint8Array","type","link","download","href","click","downloadSvg","svgName","processSvgAndDownload","images","getElementsByTagName","image_promises","all","then","url","encodeURIComponent","mysesion","replaceAll","destroy","downloadRaster","imageType","toLowerCase","removeBreakingStyles","OffscreenCanvas","preset","offscreen","anonymousCrossOrigin","ctx","v","fromString","start","ready","convertToBlob","imgUrl","URL","createObjectURL","domString","downloadPng","downloadJpeg","fillPDFDoc","doc","font","fontSize","text","y","preserveAspectRatio","downloadPdf","svgCloned","stream","pipe","font_promises","map","d","thisPdfOptions","fontName","fontFamily","styleName","registerFont","end","on","toBlobURL","exports","module","define","amd","globalThis"],"mappings":"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"}